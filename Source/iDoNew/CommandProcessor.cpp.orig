#include "CommandProcessor.h"


CommandProcessor::CommandProcessor()
{
  //load from all files into the respective char arrays
  //should also have initial command and -1
  initAddList() ;
  initRemoveList() ;
  initEditList() ;
  initSearchList() ;
  initUndoList() ;
  initExitList() ;
  initRedoList() ;
  initAltList() ;
 
}

void CommandProcessor::initAddList()
{
  int addIndex = 0 ;
  int i ;
  fileObject.setFileName("addlist.txt") ;
  strcpy(addList[addIndex],"add") ;

  //changes
  addIndex++ ;
  vector<string> storedAddList = fileObject.readFromFile() ;
  vector<string>::iterator it ;
  it = storedAddList.begin() ;
  for(; it != storedAddList.end() ; it++) {
	  strcpy(addList[addIndex],(*(it)).c_str()) ;
	  addIndex++ ;
  }
  //end changes

  strcpy(addList[addIndex],"-1") ;
}


void CommandProcessor::initRemoveList()
{
  int removeIndex = 0 ;
  int i ;
  fileObject.setFileName("removelist.txt") ;
  strcpy(removeList[removeIndex],"delete") ;

  //changes
  removeIndex++ ;
  vector<string> storedRemoveList = fileObject.readFromFile() ;
  vector<string>::iterator it ;
  it = storedRemoveList.begin() ;
  for(; it != storedRemoveList.end() ; it++) {
	  strcpy(removeList[removeIndex],(*(it)).c_str()) ;
	  removeIndex++ ;
  }
  //end changes

  strcpy(removeList[removeIndex],"-1") ;
}

void CommandProcessor::initAltList()
{
  int altIndex = 0 ;
  fileObject.setFileName("altlist.txt") ;
  strcpy(altList[altIndex],"alternate") ;
  //changes
  altIndex++ ;
  vector<string> storedAltList = fileObject.readFromFile() ;
  vector<string>::iterator it ;
  it = storedAltList.begin() ;
  for(; it != storedAltList.end() ; it++) {
	  strcpy(altList[altIndex],(*(it)).c_str()) ;
	  altIndex++ ;
  }
  //end changes
  strcpy(altList[altIndex],"-1") ;

}

void CommandProcessor::initEditList() 
{
  int editIndex = 0 ;
  fileObject.setFileName("editlist.txt") ;
  strcpy(editList[editIndex],"edit") ;
  //changes
  editIndex++ ;
  vector<string> storedEditList = fileObject.readFromFile() ;
  vector<string>::iterator it ;
  it = storedEditList.begin() ;
  for(; it != storedEditList.end() ; it++) {
	  strcpy(editList[editIndex],(*(it)).c_str()) ;
	  editIndex++ ;
  }
  //end changes
  strcpy(editList[editIndex],"-1") ;
}

void CommandProcessor::initSearchList()
{
  int searchIndex = 0 ;
  fileObject.setFileName("searchlist.txt") ;
  strcpy(searchList[searchIndex],"search") ;
  //changes
  searchIndex++ ;
  vector<string> storedSearchList = fileObject.readFromFile() ;
  vector<string>::iterator it ;
  it = storedSearchList.begin() ;
  for(; it != storedSearchList.end() ; it++) {
	  strcpy(searchList[searchIndex],(*(it)).c_str()) ;
	  searchIndex++ ;
  }
  //end changes
  strcpy(searchList[searchIndex],"-1") ;

}

void CommandProcessor::initUndoList()
{

  int undoIndex = 0 ;
  fileObject.setFileName("undolist.txt") ;
  strcpy(undoList[undoIndex],"undo") ;
    //changes
  undoIndex++ ;
  vector<string> storedUndoList = fileObject.readFromFile() ;
  vector<string>::iterator it ;
  it = storedUndoList.begin() ;
  for(; it != storedUndoList.end() ; it++) {
	  strcpy(undoList[undoIndex],(*(it)).c_str()) ;
	  undoIndex++ ;
  }
  //end changes
  strcpy(undoList[undoIndex],"-1") ;

}

void CommandProcessor::initRedoList() 
{
 
  int redoIndex = 0 ;
  fileObject.setFileName("redolist.txt") ;
  strcpy(redoList[redoIndex],"redo") ;
    //changes
  redoIndex++ ;
  vector<string> storedRedoList = fileObject.readFromFile() ;
  vector<string>::iterator it ;
  it = storedRedoList.begin() ;
  for(; it != storedRedoList.end() ; it++) {
	  strcpy(redoList[redoIndex],(*(it)).c_str()) ;
	  redoIndex++ ;
  }
  //end changes
  strcpy(redoList[redoIndex],"-1") ;

}

void CommandProcessor::initExitList()
{
  int exitIndex = 0 ;
  fileObject.setFileName("exitlist.txt") ;
  strcpy(exitList[exitIndex],"exit") ;
    //changes
  exitIndex++ ;
  vector<string> storedExitList = fileObject.readFromFile() ;
  vector<string>::iterator it ;
  it = storedExitList.begin() ;
  for(; it != storedExitList.end() ; it++) {
	  strcpy(exitList[exitIndex],(*(it)).c_str()) ;
	  exitIndex++ ;
  }

  strcpy(exitList[exitIndex],"-1") ;

}


vector <int> CommandProcessor::intProcessor (string userInput)
{
	vector <int> integers; 
	//asertion
	assert(integers.size() == 0) ;
	int temp = 0;
	for(int i=0;i<userInput.size();i++)
	{
		if(userInput[i] == ' '){
		integers.push_back(temp);
		temp = 0;
		}
		else{
			temp = temp*10 + (userInput[i] - 48);
		}
	}
	if(temp != 0)
		integers.push_back(temp);
	return integers;
}

string CommandProcessor::cmdProcessor (string userInput, Task*& newTask)
{
	int i, j;
	tm* sTime = NULL;
	tm* eTime = NULL;
	char description[MAX_DESC_SIZE], dateTime[MAX_TIME_SIZE], cmd[MAX_COMMAND_SIZE], singleWord[MAX_WORD_SIZE];
	bool start = false, end = false, checkTime = false;
	strcpy(description, "");
	strcpy(dateTime, "");
	strcpy(cmd, "");

	for(i=0; i < userInput.size() && userInput[i]!= ' ' ; i++)
	{
		cmd[i]=userInput[i];
	}

	cmd[i]='\0';
	
	bool validCmd = CommandProcessor::actualKeyWord(cmd);
	if(validCmd == false) {
			strcpy (description, cmd);
			strcat(description, " ");
			strcpy(cmd, "add");
			
		}
	if(i==userInput.size()){
		Task *ft = new FloatingTask();
			ft->setDesc(description);
			newTask=ft;
	}
	
	else{
		i++;
		while(i < userInput.size()) {

			for(j = 0; i < userInput.size() && userInput[i] != ' ' ; i++, j++){
				singleWord[j] = userInput[i];
			}
			singleWord[j] = '\0';
			
			
			checkTime = isTime(singleWord);
			if(singleWord[0] == '[')
				CommandProcessor::trim(singleWord);
			
			if(checkTime == true && (start == true || end == true)){
				strcat(singleWord, " ");
				strcat(dateTime, singleWord);
				if( i == userInput.size() ){
					CommandProcessor::parseDateTime(dateTime);
						if(start == true){
							sTime = CommandProcessor::stringToTime(dateTime);
							start = false;
						}
						else if(end == true){
							eTime = CommandProcessor::stringToTime(dateTime);
							end = false;
						}
						strcpy(dateTime, "");

				}
			}
			else {
				if(isStart(singleWord)){
					start = true;
				}

				else if(isEnd(singleWord)){
					end = true;
				}
			
				else{
					strcat(singleWord, " ");
					strcat(description, singleWord);
				}

				if(strlen(dateTime) > 0){
					CommandProcessor::parseDateTime(dateTime);
						if(start == true){
							sTime = CommandProcessor::stringToTime(dateTime);
							start = false;
						}
						else if(end == true){
							eTime = CommandProcessor::stringToTime(dateTime);
							end = false;
						}
						strcpy(dateTime, "");
				}
				
		}	
		i++;

	}

	if(eTime == NULL && sTime == NULL){
		newTask = new FloatingTask(description);
		
	}
	else if(sTime == NULL){
		newTask = new DeadlinedTask(description, eTime);
		
	}
	else if(eTime == NULL){
		newTask = new DeadlinedTask(description, sTime);
		
	}
	else{
		newTask = new TimedTask(description, sTime, eTime);
	}
	}
	return cmd ;
}

void CommandProcessor::descProcessor (string userInput, Task*& newTask)
{
	int i = 0, j;
	tm* sTime = NULL;
	tm* eTime = NULL;
	char description[MAX_DESC_SIZE], dateTime[MAX_TIME_SIZE], cmd[MAX_COMMAND_SIZE], singleWord[MAX_WORD_SIZE];
	bool start = false, end = false, checkTime;
	strcpy(description, "");
	strcpy(dateTime, "");
	strcpy(cmd, "");

			while(i < userInput.size()){

			for(j = 0; i < userInput.size() && userInput[i] != ' ' ;i++, j++){
				singleWord[j] = userInput[i];
			}
			singleWord[j] = '\0';
			
			
			checkTime = isTime(singleWord);
			if(singleWord[0] == '[')
				CommandProcessor::trim(singleWord);
			
			if(checkTime == true && (start == true || end == true)){
				strcat(singleWord, " ");
				strcat(dateTime, singleWord);
				if( i == userInput.size() ){
					CommandProcessor::parseDateTime(dateTime);
						if(start == true){
							sTime = CommandProcessor::stringToTime(dateTime);
							start = false;
						}
						else if(end == true){
							eTime = CommandProcessor::stringToTime(dateTime);
							end = false;
						}
						strcpy(dateTime, "");

				}
			}
			else {
				if(isStart(singleWord)){
					start = true;
				}

				else if(isEnd(singleWord)){
					end = true;
				}
			
				else{
					strcat(singleWord, " ");
					strcat(description, singleWord);
				}

				if(strlen(dateTime) > 0){
					CommandProcessor::parseDateTime(dateTime);
						if(start == true){
							sTime = CommandProcessor::stringToTime(dateTime);
							start = false;
						}
						else if(end == true){
							eTime = CommandProcessor::stringToTime(dateTime);
							end = false;
						}
						strcpy(dateTime, "");
				}
				
		}	
		i++;

	}
	
	
	
	if(eTime == NULL && sTime == NULL){
		
		if(description[0] == '\0')
			strcpy(description, newTask->getDesc().c_str());  
		sTime = newTask->getStart();
		eTime = newTask->getEnd();
		if(eTime == NULL){
			newTask = new FloatingTask(description);
		}
		else if(sTime == NULL){
			newTask = new DeadlinedTask(description, eTime);
		}
		else{
			newTask = new TimedTask(description, sTime, eTime);
		}

	}
	else if(sTime == NULL){
		if(description[0] == '\0')
			strcpy(description, newTask->getDesc().c_str());
		sTime = newTask->getStart();
		
		if(sTime == NULL){
			newTask = new DeadlinedTask(description, eTime);
		}
		else{
			newTask = new TimedTask(description, sTime, eTime);
		}
	}
	else if(eTime == NULL){
		if(description[0] == '\0')
			strcpy(description, newTask->getDesc().c_str());
		eTime = newTask->getEnd();
		
		newTask = new TimedTask(description, sTime, eTime);
		
	}
	else{
		if(description[0] == '\0')
			strcpy(description, newTask->getDesc().c_str());
		newTask = new TimedTask(description, sTime, eTime);
		
	}
		
}

tm* CommandProcessor::stringToTime (string startTime)
{
		
	tm* sTime = new tm;
	int index = 0;

	//daylight savings flag
	sTime->tm_isdst = -1 ;
	//hrs since midnight 0-23
	sTime->tm_hour = 0 ;
	//day of the month 1-31
	sTime->tm_mday = 0;
	//min after the hour 0-61
	sTime->tm_min = 0 ;
	//months since Jan 0-11
	sTime->tm_mon = 0 ;
	//days since Sunday 0-6
	sTime->tm_wday = 0 ;
	//days since Jan 1st 0-365
	sTime->tm_yday = 0 ;
	//years since 1900, 0-2041(not sure of this range...)
	sTime->tm_year = 0 ;
	//seconds after the minute, 0-59
	sTime->tm_sec = 0 ;

	int date=(startTime[0]-ASCII_VALUE_0)*10+(startTime[1]-ASCII_VALUE_0);
	int month=(startTime[2]-ASCII_VALUE_0)*10+(startTime[3]-ASCII_VALUE_0);
	int year=(startTime[4]-ASCII_VALUE_0)*1000+(startTime[5]-ASCII_VALUE_0)*100+(startTime[6]-ASCII_VALUE_0)*10+(startTime[7]-ASCII_VALUE_0);
	
	sTime->tm_mday=date;
	sTime->tm_mon=month;
	sTime->tm_year=year-1900 ;
	
	int hour=(startTime[8]-ASCII_VALUE_0)*10+(startTime[9]-ASCII_VALUE_0);
	int min=(startTime[10]-ASCII_VALUE_0)*10+(startTime[11]-ASCII_VALUE_0);
	
	sTime->tm_hour = hour;
	sTime->tm_min = min;
	
	return sTime;
}
bool CommandProcessor::actualKeyWord(char userCmd[MAX_COMMAND_SIZE]) {

	bool isAdd, isRemove, isEdit, isSearch, isExit, isUndo,isRedo, isAlternate ;
	
	isAdd = CommandProcessor::isFound(userCmd, "add") ;
	isRemove = CommandProcessor::isFound(userCmd, "remove") ;
	isEdit = CommandProcessor::isFound(userCmd, "edit");
	isSearch = CommandProcessor::isFound(userCmd, "search") ;
	isExit = CommandProcessor::isFound(userCmd, "exit");
	isUndo = CommandProcessor::isFound(userCmd, "undo");
	isRedo = CommandProcessor::isFound(userCmd, "redo");
	isAlternate = CommandProcessor::isFound(userCmd, "alternate") ;

	if(isAdd)
		strcpy(userCmd, "add");
	else if(isRemove)
		strcpy(userCmd, "delete");
	else if(isEdit)
		strcpy(userCmd, "edit");
	else if(isSearch)
		strcpy(userCmd, "search");
	else if(isExit)
		strcpy(userCmd, "exit");
	else if(isUndo)
		strcpy(userCmd, "undo");
	else if(isRedo)
		strcpy(userCmd, "redo");
	else if(isAlternate)
		strcpy(userCmd, "alternate") ;
	
	if(isAdd == false && isRemove == false && isEdit == false && isSearch == false && isExit == false && isUndo == false && isRedo==false && isAlternate == false)
		return false;
	else 
		return true;

}

//delete & remove
bool CommandProcessor::isFound(char cmd[MAX_COMMAND_SIZE], string cmdType) {

	int i = 0;

	if(cmdType == "add") {

		while(strcmpi("-1", addList[i]) != 0) {
		if(strcmpi(cmd, addList[i]) == 0)
			return true;
		i++;
		}
	}
	else if(cmdType == "remove") {
		while(strcmpi("-1", removeList[i]) != 0) {
		if(strcmpi(cmd, removeList[i]) == 0)
			return true;
		i++;
		}

	}
	else if(cmdType == "edit") {
		while(strcmpi("-1", editList[i]) != 0) {
		if(strcmpi(cmd, editList[i]) == 0)
			return true;
		i++;
		}

	}
	else if(cmdType == "search") {
		while(strcmpi("-1", searchList[i]) != 0) {
		if(strcmpi(cmd, searchList[i]) == 0)
			return true;
		i++;
		}

	}
	else if(cmdType == "exit") {
		while(strcmpi("-1", exitList[i]) != 0) {
		if(strcmpi(cmd, exitList[i]) == 0)
			return true;
		i++;
		}

	}
	else if(cmdType == "undo") {
		while(strcmpi("-1", undoList[i]) != 0) {
		if(strcmpi(cmd, undoList[i]) == 0)
			return true;
		i++;
		}

	}
	else if(cmdType == "redo") {
		while(strcmpi("-1", redoList[i]) != 0) {
		if(strcmpi(cmd, redoList[i]) == 0)
			return true;
		i++;
		}

	}
	else if(cmdType == "alternate") {
		while(strcmpi("-1", altList[i]) != 0) {
		if(strcmpi(cmd, altList[i]) == 0)
			return true;
		i++;
		}

	}

	return false ;

}

bool CommandProcessor::isFound(char cmd[MAX_COMMAND_SIZE], const char cmdList[][MAX_COMMAND_SIZE]) {

	int i = 0 ;
	while(strcmpi("-1", cmdList[i]) != 0) {
		if(strcmpi(cmd, cmdList[i]) == 0)
			return true;
		i++;
	}

	return false ;
}



bool CommandProcessor::isStart(char singleWord[MAX_WORD_SIZE]){
	
    return CommandProcessor::isFound(singleWord, startList);

}

bool CommandProcessor::isEnd(char singleWord[MAX_WORD_SIZE]){
	
	return CommandProcessor::isFound(singleWord, endList);

}

void CommandProcessor::trim(char word[MAX_COMMAND_SIZE]){
	char trimmed[MAX_COMMAND_SIZE];
	int i;
	for( i = 0;  word[i + 1] != ']'; i++){
		trimmed[i] = word[i + 1];
	}
	trimmed[i] = '\0';
	strcpy(word, trimmed);
}

bool CommandProcessor::isTime(char singleWord[MAX_WORD_SIZE]) {
	bool time = isFound(singleWord, timeList);
	if(time == true)
		return time;
	else
		time = isNumericalTime(singleWord);
	return time;
}

bool CommandProcessor::isNumericalTime(char singleWord[MAX_COMMAND_SIZE]){
	int buffer = 0, i = 0;
	bool returnVal = false;
	
	switch (strlen(singleWord)){
			// Case 10 and 8 for dd/mm/yyyy and dd/mm/yy respectively
		case 6:
		case 7:
		case 9:
		case 10:
		case 8:	
			buffer = 0;
			i = 0;
			while(singleWord[i] != '/' && singleWord[i] != '.' && i < strlen(singleWord)){
				buffer = buffer * 10 + (singleWord[i] - 48);
				i++;
			}
			
			returnVal = isDay(buffer);
			if(returnVal == false)
				return false;
			buffer = 0;
			i++;

			while(singleWord[i] != '/' && singleWord[i] != '.' && i < strlen(singleWord)){
			buffer = buffer * 10 + (singleWord[i] - 48);
			i++;
			}
			
			returnVal = isMonth(buffer);
			if(returnVal == false)
				return false;
			buffer = 0;
			i++;

			while(singleWord[i] != '/' && singleWord[i] != '.' && i < strlen(singleWord)){
				buffer = buffer * 10 + (singleWord[i] - 48);
				i++;
			}
			
			returnVal = isYear(buffer);
				
			break;
			//case 3, 4, 5 for h:m, hh:m or h:mm, hh:mm respectively
		
		case 3 :
		case 4 :
		case 5 :
			buffer = 0;
			i = 0;
			while(singleWord[i] != ':' && singleWord[i] != '.' && i < strlen(singleWord)){
				buffer = buffer * 10 + (singleWord[i] - 48);
				i++;
			}
			
			returnVal = isHour(buffer);
			if(returnVal == false)
				return false;

			buffer = 0;
			i++;

			while((singleWord[i] != ':' || singleWord[i] != '.' )&& i < strlen(singleWord)){
				buffer = buffer * 10 + (singleWord[i] - 48);
				i++;
			}
			
			returnVal = isMinute(buffer);
			
			break;
		
		default: returnVal = false;

		}
	return returnVal;
}
	
bool CommandProcessor::isDay(int input){
	if(input >=1 && input <= 31){
		return true;
	}
	else return false;
}

bool CommandProcessor::isMonth(int input){
	if(input >=1 && input <= 12)
		return true;
	else 
		return false;
}

bool CommandProcessor::isYear(int input){
	if(input > 0 && input < 100){
		return true;
	}
	else if(input > 1000){
		return true;
	}
	else
		return false;
}

bool CommandProcessor::isHour(int input){
	if(input >= 0 && input <= 24)
		return true;
	else 
		return false;
}

bool CommandProcessor::isMinute(int input){
	if(input >= 0 && input <= 60)
		return true;
	else 
		return false;
}

bool CommandProcessor::parseDateTime(char dateTime[MAX_TIME_SIZE]){
	char singleWord[MAX_TIME_SIZE], finalTime[MAX_TIME_SIZE];
	strcpy(finalTime, "");
	int i = 0, j, tempTime = 0;
	while(i < strlen(dateTime)){
		for(j = 0; i < strlen(dateTime) && dateTime[i] != ' '; i++, j++){
			singleWord[j] = dateTime[i];
		}
		singleWord[j] = '\0';
		
		bool isNumeric = CommandProcessor::isNumericalTime(singleWord);
		if(isNumeric == true){
			if(strlen(singleWord) >= 6){
				CommandProcessor::addZeroes(singleWord);
				CommandProcessor::convertDate(singleWord);
				strcat(finalTime, singleWord);
			}
			else{
				CommandProcessor::addZeroes(singleWord);
				CommandProcessor::convertTime(singleWord);
				strcat(finalTime, singleWord);
			}
			
		}
		else{
		}

		i++;
	}
	strcpy(dateTime, finalTime);
	return true;
}


void CommandProcessor::convertDate(char Date[MAX_TIME_SIZE]){
	
	int j = 0, k = 0,  year;
	char tempTime[MAX_TIME_SIZE], tempYear[MAX_TIME_SIZE];
	strcpy(tempTime, "");
	strcpy(tempYear, "");
	for(j = 0; j < strlen(Date); j++){
		tempTime[j] = Date[j];
		
	}
	tempTime[j] = '\0' ;
	//when date is dd/mm/yy
	if(strlen(tempTime) == 6){
		year = (tempTime[4] - 48)*10 + (tempTime[5] - 48);
		if(year >= 90){
			year = 1900 + year;
		}
		else{
			year = 2000 + year;
		}
		tempTime[4] = '\0';
		itoa(year, tempYear, 10);
		strcat(tempTime, tempYear);
	}
	strcpy(Date, tempTime);
}
void CommandProcessor::convertTime(char Date[MAX_TIME_SIZE]){
	int j = 0, k = 0,  year;
	char tempTime[MAX_TIME_SIZE];
	
	for(j = 0; j < strlen(Date); j++){
		if(isalnum(Date[j]) && !(isalpha(Date[j]))){
		tempTime[j] = Date[j];
		}
	}
	tempTime[j] = '\0';
	strcpy(Date, tempTime);
}

void CommandProcessor::addZeroes(char input[MAX_TIME_SIZE]){
	char newDate[MAX_TIME_SIZE], tempDate[MAX_TIME_SIZE];
	strcpy(newDate, "");
	int i = 0, j = 0;
	int buffer;
	while(i < strlen(input)){
		buffer = 0;
		for(; (input[i] != '/' && input[i] != ':' && input[i] != '.' ) &&(i < strlen(input)); i++){
			if( isalnum(input[i]) && !(isalpha(input[i])) ){
				buffer = buffer * 10 + (input[i] - 48) ;
			}
		}
		i++;
			if(buffer < 10){
				newDate[j] = '0';
				j++;
				newDate[j] = buffer + 48;
				j++;
				newDate[j] = '\0';
			}
			else{
				itoa(buffer, tempDate, 10);
				strcat(newDate, tempDate);
				j += 2;
			}
	}
	strcpy(input, newDate);
}

string CommandProcessor::removeLastSpace(string word)
{
  
  string tempWord ;

  int lastLetterIndex = word.size()-1 ;

  if(word[lastLetterIndex] == ' ') {
	  tempWord = word.substr(0,lastLetterIndex) ;
	  word = tempWord ;
 
  }

  return word ;
  
}
